---
import videos from '../../data/videos_metadata.json' assert { type: 'json' };
import { createSlug } from '../../utils/slug';
import type { Astro } from 'astro';

export interface SeoInfo {
  seo_title: string;
  seo_description: string;
}

export interface VideoInfo {
  video_id: string;
  title: string;
  description: string;
  channel_title: string;
  published_at: string;
  view_count: string;
  like_count: string;
  comment_count: string;
  duration: string;
  youtube_url: string;
  thumbnail_file: string;
  thumbnails: {
    default?: { url: string };
    medium?: { url: string };
    high?: { url: string };
    standard?: { url: string };
    maxres?: { url: string };
  };
  transcript: string | null;
  comments: string[];
}

interface Props {
  video: VideoInfo;
  seoData: SeoInfo | null;
}

export async function getStaticPaths() {
  const paths = [];

  for (const video of videos) {
    let seoData: SeoInfo | null = null;
    try {
      const seoModule = await import(`../../data/sumarios_seo/${video.video_id}.json`);
      seoData = seoModule.default;
    } catch {
      console.warn(`SEO file missing for video: ${video.video_id}`);
    }

    const videoSlug = `${video.video_id}-${createSlug(video.title)}`;

    paths.push({
      params: { videoSlug },
      props: { video, seoData },
    });
  }

  return paths;
}

const { video, seoData } = Astro.props;

const pageTitle = seoData?.seo_title || video.title;
const pageDescription = seoData?.seo_description || video.description;

const pageDescriptionParsed = pageDescription
  .replace(/\*\*(.*?)\*\*/g, '$1')
  .replace(/\*(.*?)\*/g, '$1')

const youtubeWatchUrl = `https://www.youtube.com/watch?v=${video.video_id}`;

const dateObj = new Date(video.published_at);
const formattedDate = dateObj.toLocaleString('en-US', {
  dateStyle: 'medium',
  timeStyle: 'short',
});

const thumbnailSrc = video.thumbnails?.maxres?.url || video.thumbnail_file;
---

<!DOCTYPE html>
<html lang="en" class="dark">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width" />
    <title>{pageTitle}</title>
    <meta name="description" content={pageDescription} />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <link rel="preconnect" href="https://fonts.googleapis.com" />
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
    <link href="https://fonts.googleapis.com/css2?family=Roboto:wght@400;700&display=swap" rel="stylesheet" />
    
    <style>
      :root {
        --color-primary: #ff0000;
        --color-bg: #131313;
        --color-text: #fff;
        --color-border: #444;
      }

      html {
        font-family: 'Roboto', system-ui, sans-serif;
        background-color: var(--color-bg);
        color: var(--color-text);
        /* overflow-x: hidden; */
      }

      body {
        margin: 0;
        min-height: 100vh;
        display: flex;
        flex-direction: column;
      }
      
      main.container {
        max-width: 700px;
        margin: auto;
        padding: 1.5rem;
      }

      h1, h2, h3 {
        font-weight: 700;
        color: var(--color-text);
      }

      p {
        font-weight: 400;
      }
      .description-text {
        max-width: 100%;
        word-wrap: break-word;
        overflow-wrap: break-word;
      }
      .description-container {
        margin-top: 0.5rem;
        color: #ccc;
        line-height: 1.3;
        background-color: rgba(0, 0, 0, 0.4);
        padding: 1rem;
        border-radius: 8px;
        filter : brightness(140%);
        width: 110%;
        margin-left: -10%;
        margin-right: -10%;
      }

      img.thumbnail {
        max-width: 100%;
        height: auto;
        display: block;
        margin: 0 auto 1.5rem auto;
        border-radius: 8px;
      }

      .buttons-container {
        display: flex;
        justify-content: center;
        gap: 1rem;
        margin-bottom: 1.5rem;
      }
    .thumbnail-wrapper {
      position: relative;
      max-width: 700px;
      width: 100%;
      margin: 0 auto 1.2rem auto;
      border-radius: 20px;
      box-sizing: border-box;
    }

    .thumbnail-blur {
      position: fixed; /* Fixed to viewport*/
      top: 40%; 
      left: 50%;
      width: 120vw;
      height: auto;
      filter: blur(30px);
      opacity: 0.3;
      pointer-events: none;
      transform: translate(-50%, -50%);
      z-index: -1;
    }

    .thumbnail {
      position: relative;
      z-index: 1;
      max-width: 100%;
      height: auto;
      border-radius: 8px;
      display: block;
      margin: 0 auto;
      box-sizing: border-box;
    }


      @media (max-width: 900px) {

        .description-container {
          width: 90%;
          margin-left: 1%;
          margin-right: 1%;
          background-color: rgba(0, 0, 0, 0.6);
        }
        

        .buttons-container {
          flex-direction: column;
          align-items: center;
          gap: 0.75rem;
        }

        button.btn {
          width: 100%;
          max-width: 300px;
          font-size: 1.25rem;
          padding: 0.75rem 1rem;
        }

        a.btn {
          width: auto;
          max-width: 250px;
          font-size: 1rem;
          padding: 0.75rem 1rem;
          align-self: center;
        }
        .thumbnail-blur {
          position: fixed;
          top: 45%;
          left: 50%;
          width: 200%;
          filter: blur(30px);
          opacity: 0.4;
          z-index: -1;
          pointer-events: none;
          transform: scale(1.2) translate(-40%, -45%);
        }
      }

      @media (min-width: 1200px) {
        .thumbnail-blur {
          opacity: 0.2;
          filter: blur(40px);
        }
        .description-container {
        width: 140%;
        margin-left: -20%;
        margin-right: -20%;
        }
        .description-text {
          padding-left: 2.5%;
          padding-right: 2.5%;
        }
      }

      a.btn, button.btn {
        font-weight: 700;
        border-radius: 8px;
        font-size: 1.5rem;
        padding: 0.75rem 2rem;
        min-width: 180px;
        cursor: pointer;
        display: flex;
        align-items: center;
        justify-content: center;
        text-decoration: none;
        color: #fff;
        border: none;
        font-family: 'Roboto', sans-serif;
        transition: background-color 0.3s ease;
      }

      a.btn {
        background-color: var(--color-primary);
      }

      a.btn:hover {
        background-color: #cc0000;
      }

      button.btn {
        background-color: #555;
      }

      button.btn:hover {
        background-color: #333;
      }
  </style>

  </head>
  <body>
    <main class="container">

      <div class="thumbnail-wrapper">
        <img src={thumbnailSrc} alt={video.title} class="thumbnail-blur" />
        <img src={thumbnailSrc} alt={video.title} class="thumbnail" />
      </div>

      <h1 style="text-align: center; margin-bottom:1rem;">{pageTitle}</h1>
      <!-- <p style="text-align: center; margin: 0; margin-bottom:.4rem">By {video.channel_title}</p> -->
      <p style="text-align: center; font-size: 0.95rem; color: #ccc;
      margin: 0; margin-bottom:1rem;">
      üëÅÔ∏è {video.view_count} views ¬∑ üóìÔ∏è {formattedDate} ¬∑ ‚úçÔ∏è By {video.channel_title}
      </p>

      <div class="buttons-container">
        <a
          href={youtubeWatchUrl}
          target="_blank"
          rel="noopener noreferrer"
          class="btn"
          aria-label="Watch this video on YouTube"
        >
          Watch on YouTube
        </a>

        <button
          class="btn"

          onclick="
            if (document.referrer && document.referrer.startsWith(window.location.origin)) {
              window.history.back();
            } else {
              window.location.href = '/';
            }
          ">
          Go
          back
        </button>

      </div>

      <div class="description-container">
        <p class="description-text" style="white-space: pre-line;">{pageDescriptionParsed}</p>
      </div>

    </main>
  </body>
</html>